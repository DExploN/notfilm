<?class db{	private static $_instance;	private $mysqli;		private $mysql_in_pat=array();	private $mysql_in_sub=array();	private $mysql_out_pat=array();	private $mysql_out_sub=array();	private $mysql_filter_array=array("select","update","table","delete","where","insert","BENCHMARK","db","database","char","information_schema","ascii","CONCAT","group","count","sum","ORD","CONV","BIN","OCT","HEX","OUTFILE","load_file","\*","\/","#","--","user");	public $lastQuery;	private $where;	private $select;	private $limit;	private $orderBy;	private $groupBy;	private $having;	private $join;		private function __construct(){	}	private function __clone(){	}		public static function getDb($host='',$user='',$password='',$db=''){		if(!self::$_instance){			$mysqli= new mysqli($host,$user,$password);			if ($mysqli->connect_errno) {				die("Не удалось подключиться к MySQL: (" . $mysqli->connect_errno . ") " . $mysqli->connect_error);			}else{				if($mysqli->select_db($db)){					$mysqli->query("SET CHARACTER SET utf8") or die($mysqli->error);					$mysqli->query("SET NAMES utf8") or die($mysqli->error);					$mysqli->query("SET character_set_client='utf8'") or die($mysqli->error);					$mysqli->query("SET character_set_results='utf8'") or die($mysqli->error);					$mysqli->query("SET collation_connection='utf8_general_ci'") or die($mysqli->error);					$obj=new self();					$obj->mysqli=$mysqli;					$obj->addFilter(array());					$obj::$_instance=$obj;					return $obj;				}				die($mysqli->error);			}		}else{			return self::$_instance;		}	}		public function addFilter($var){		if(is_array($var)){			$var=array_diff($var,$this->mysql_filter_array);			$this->mysql_filter_array=array_merge($this->mysql_filter_array,$var);		}else{			$var=explode(",",$var);			if(count($var)){				$var=array_diff($var,$this->mysql_filter_array);				$this->mysql_filter_array=array_merge($this->mysql_filter_array,$var);			}		}		$this->mysql_in_pat=array();		$this->mysql_in_sub=array();		$this->mysql_out_pat=array();		$this->mysql_out_sub=array();		foreach($this->mysql_filter_array as $value){			$this->mysql_in_pat[]="/".$value."/i";			$this->mysql_in_sub[]="___$0___";			$this->mysql_out_pat[]="/___(".$value.")___/i";			$this->mysql_out_sub[]="$1";		}	}			public function mysql_in($str){		$mysql_in_pat=$this->mysql_in_pat;		$mysql_in_sub=$this->mysql_in_sub;		if(is_array($str)){			foreach($str as $key=>$value){				$str[$key]=$this->mysql_in($value);			}			return($str);		}else{			$str=str_replace("<script","&lt;script",$str);			$str=preg_replace($mysql_in_pat,$mysql_in_sub,$str);			$str=$this->mysqli->real_escape_string($str);			$str=trim($str);			return($str);		}	}	public function mysql_out($str){		$mysql_out_pat=$this->mysql_out_pat;		$mysql_out_sub=$this->mysql_out_sub;		if(is_array($str)){			foreach($str as $key=>$value){				$str[$key]=$this->mysql_out($value);			}			return($str);		}else{			$str=preg_replace($mysql_out_pat,$mysql_out_sub,$str);			return($str);			return($str);		}	}		public function query($query,$params=array()){				$query=$this->screening($query,$params);				$result=$this->mysqli->query($query) or die($this->mysqli->error);		$this->clear();		$this->lastQuery=$query;				return  $result;	}		public function get($table){		$this->limit(1);		if($this->select){			$query="select ";			$query.=$this->select;		}else{			$query="select * ";		}				$query.=" from ";		$query.="`".$table."`";		$query.=$this->join;		$query.=$this->where;		$query.=$this->groupBy;		$query.=$this->having;		$query.=$this->orderBy;		$query.=$this->limit;		return $this->getBySql($query);	}		public function getAll($table,& $num=false){		$query="select ";		if($this->select){			$query="select ";			$query.=$this->select;		}else{			$query="select * ";		}			$query.=" from ";		$query.="`".$table."`";		$query.=$this->join;		$query.=$this->where;		$query.=$this->groupBy;		$query.=$this->having;		$query.=$this->orderBy;		$query.=$this->limit;		if($num!==false){			if(!$this->groupBy){				$this->select=" * ";				$gb=false;							}else{				$gb=true;			}			$this->limit=NULL;			$num=$this->NumRows($table,$gb);		}		return $this->getAllBySql($query);	}	public function NumRows($table,$gb=false){		if($gb){			$query="select ";			if($this->select){				$query="select ";				$query.=$this->select;			}else{				$query="select * ";			}		}else{			if(!$this->select)$this->select=' * ';			$query="select count(".$this->select.") as `count_nr`";		}				$query.=" from ";		$query.="`".$table."`";		$query.=$this->join;		$query.=$this->where;		$query.=$this->groupBy;		$query.=$this->having;		$query.=$this->orderBy;		$query.=$this->limit;		if($gb){			$query="select count(*) as `count_nr` from ($query)`t_nr`";		}				$res=$this->getBySql($query);		return $res['count_nr'];	}		public function getBySql($query,$params=array()){		$result=$this->query($query,$params);		$data=$result->fetch_assoc();		if($data===NULL)return NULL;		return $this->mysql_out($data);	}		public function getAllBySql($query,$params=array()){		$result=$this->query($query,$params);		$num=$result->num_rows;		$data=array();		for($i=0;$i<$num;$i++){			$data[]=$result->fetch_assoc();		}		return $this->mysql_out($data);	}		public function insert($table,$data,$dubkey=false){		if(count($data)){			foreach($data as $col=>$value){				$value=$this->mysql_in($value);				$cols[]="`".$col."`";				$values[]="'".$value."'";				if($dubkey)$update[]="`".$col."`='".$value."'";			}			$query="insert into `$table`(".implode(",",$cols).") values(".implode(",",$values).")";			if($dubkey)$query.="ON DUPLICATE KEY UPDATE ".implode(",",$update)."";			return $this->query($query);		}	}		public function inserts($table,$columns,$values){		$i=0;		$valuesStr=array();		foreach($values as $value){			foreach($columns as $key=>$column){				$valuesStr[$i][]=$value[$column];			}			$i++;		}		for($j=0;$j<$i;$j++){			foreach($valuesStr[$j] as $key=>$value){				$valuesStr[$j][$key]="'".$this->mysql_in($value)."'";			}			$valuesStr[$j]='('.implode(',',$valuesStr[$j]).')';		}		foreach($columns as $key=>$column){			$columns[$key]='`'.$column.'`';		}		if($table && count($columns) && count($valuesStr)){			$query="insert into `$table`(".implode(",",$columns).") values".implode(",",$valuesStr);			return $this->query($query);		}else{			return false;		}			}		public function delete($table){		$query="";		$query.="delete from ";		$query.="`".$table."`";		$query.=$this->where;		return $this->query($query);	}	public function update($table,$data){		if(count($data)){			foreach($data as $col=>$value){				$update[]="`".$col."`='".$this->mysql_in($value)."'";			}			$query="";			$query.=" update ";			$query.="`".$table."`";			$query.=" set ";			$query.=implode(",",$update);			$query.=$this->where;			return $this->query($query);		}	}			public function where($data,$params=false){		if($this->where==NULL){			$this->where=" where ";		}else{			$this->where.=" and ";		}				if($params===false){			$arr=array();			foreach($data as $TbCol=>$value){				$TbCol=explode(" ",$TbCol);				$TbCol[0]=$this->TbCol($TbCol[0]);				if(!$TbCol[1])$TbCol[1]="=";				$arr[]=$TbCol[0]." ".$TbCol[1]." '".$this->mysql_in($value)."'";			}			$this->where.=implode(" and ",$arr);		}else{			$this->where.=$this->screening($data,$params);		}		return $this;	}		public function whereOr($data,$params=false){		if($this->where==NULL){			$this->where=" where ";		}else{			$this->where.=" or ";		}				if($params===false){			$arr=array();			foreach($data as $TbCol=>$value){				$TbCol=explode(" ",$TbCol);				$TbCol[0]=$this->TbCol($TbCol[0]);				if(!$TbCol[1])$TbCol[1]="=";				$arr[]=$TbCol[0]." ".$TbCol[1]." '".$this->mysql_in($value)."'";			}			$this->where.=implode(" or ",$arr);		}else{			$this->where.=$this->screening($data,$params);		}		return $this;	}		public function whereIn($data,$params=false){		if($this->where==NULL){			$this->where=" where ";		}else{			$this->where.=" and ";		}				if($params===false){			$arr=array();			list($key,$values)=each($data);			$key=$this->TbCol($key);			foreach($values as $value ){				$arr[]="'".$this->mysql_in($value)."'";			}			$this->where.=" ".$key." in(".implode(", ",$arr).")";		}else{			$this->where.=$this->screening($data,$params);		}		return $this;	}		public function whereInOr($data,$params=false){		if($this->where==NULL){			$this->where=" where ";		}else{			$this->where.=" or ";		}				if($params===false){			$arr=array();			list($key,$values)=each($data);			$key=$this->TbCol($key);			foreach($values as $value ){				$arr[]="'".$this->mysql_in($value)."'";			}			$this->where.=" ".$key." in(".implode(", ",$arr).")";		}else{			$this->where.=$this->screening($data,$params);		}		return $this;	}		public function whereNotIn($data,$params=false){											if($params===false){				$arr=array();				list($key,$values)=each($data);				$key=$this->TbCol($key);				foreach($values as $value ){					$arr[]="'".$this->mysql_in($value)."'";				}				if($arr){					if($this->where==NULL){						$this->where=" where ";					}else{						$this->where.=" and ";					}						$this->where.=" ".$key." not in(".implode(", ",$arr).")";				}			}else{				if($arr){					if($this->where==NULL){						$this->where=" where ";					}else{						$this->where.=" and ";					}						$this->where.=$this->screening($data,$params);				}				}				return $this;	}		public function whereNotInOr($data,$params=false){		if($this->where==NULL){			$this->where=" where ";		}else{			$this->where.=" or ";		}				if($params===false){			$arr=array();			list($key,$values)=each($data);			$key=$this->TbCol($key);			foreach($values as $value ){				$arr[]="'".$this->mysql_in($value)."'";			}			$this->where.=" ".$key." not in(".implode(", ",$arr).")";		}else{			$this->where.=$this->screening($data,$params);		}		return $this;	}				public function select($data,$flag=false){		if($this->select)$this->select.=', ';		if($flag===false){			$data=explode(",",$data);			foreach($data as $key=>$value){				$value=explode(" as ",$value);				$data[$key]=$this->TbCol($value[0]);				if($value[1])$data[$key]=$data[$key]." as `".$value[1]."`";			}			$this->select.=implode(",",$data);		}else{			$this->select.=$data;		}				return $this;	}		public function limit($offset,$num=NULL){		$this->limit=" limit ".$this->mysql_in($offset);		if($num)$this->limit.=",".$this->mysql_in($num);		return $this;	}		public function orderBy($data,$flag=false){			if($flag===false){				$arr=array();			foreach($data as $key=>$value){				$arr[]=$this->TbCol($key)." ".$value;			}			$this->orderBy=" order by ". implode(", ",$arr);		}else{			$this->orderBy=" order by ".$data;		}		return $this;	}		public function groupBy($data){		$this->groupBy=" group by ". $this->TbCol($data);		return $this;	}			public function having($data,$params=false){		if($this->having==NULL){			$this->having=" having ";		}else{			$this->having.=" and ";		}				if($params===false){			$arr=array();			foreach($data as $TbCol=>$value){				$TbCol=explode(" ",$TbCol);				$TbCol[0]=$this->TbCol($TbCol[0]);				if(!$TbCol[1])$TbCol[1]="=";				$arr[]=$TbCol[0]." ".$TbCol[1]." '".$this->mysql_in($value)."'";			}			$this->having.=implode(" and ",$arr);		}else{			$this->having.=$this->screening($data,$params);		}		return $this;	}			public function leftJoin($table,$col1,$col2){		$this->join.=" left join `$table` on ".$this->TbCol($col1)."=".$this->TbCol($col2)." ";		return $this;	}		public function join($table,$col1,$col2){		$this->join.=" join `$table` on ".$this->TbCol($col1)."=".$this->TbCol($col2)." ";		return $this;	}		public function rightJoin($table,$col1,$col2){		$this->join.=" right join `$table` on ".$this->TbCol($col1)."=".$this->TbCol($col2)." ";		return $this;	}				public function insertId(){		return $this->mysqli->insert_id;	}	public function mysqli(){		return $this->mysqli;	}		private function clear(){		$this->select=NULL;		$this->where=NULL;		$this->limit=NULL;		$this->groupBy=NULL;		$this->having=NULL;		$this->orderBy=NULL;		$this->join=NULL;	}		private function TbCol($TbCol){		$_TbCol=array();		foreach(explode(".",$TbCol) as $val){			$_TbCol[]="`".trim($val)."`";		}		$TbCol=implode(".",$_TbCol);		return $TbCol;	}		private function screening($str,$params){		if(is_array($params)){			foreach($params as $key=>$value){				$str=str_replace($key,$this->mysql_in($value),$str);			}		}		return $str;	}}?>