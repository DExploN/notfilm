<?class users extends \table {	protected $id=NULL;	protected $data=array();	protected $privileges=array();	protected $auth=NULL; 	protected static $_instance;		public function __construct(){		parent::__construct();	}		public static function hash(){		foreach(func_get_args() as $value){			$str.=trim($value);		}		if($str){			return md5('1'.md5($str));		}else{			return false;		}	}		public static function addUser($data){		$user=db()->where(array('login'=>$data['login']))->get('users');				try{			if(!preg_match('/^[a-zA-Z0-9]{5,20}$/iu',$data['login'])){				throw new Exception('Логин должен 5-20 символов и состоять из a-Z 0-9');			}			if(!preg_match('/^[a-zA-Z0-9]{5,20}$/iu',$data['password'])){				throw new Exception('Пароль должен 5-20 символов и состоять из a-Z 0-9');			}			if($data['password']!=$data['password2']){				throw new Exception('Пароли не совпадают');			}		unset($data['password2']);		}catch(Exception $e){			\msg::set('error',$e->getMessage());			return false;		}				if(!$user['login']){			$data['password']=self::hash($data['password']);			unset($data['id']);			db()->insert('users',$data);			$id=db()->insertId();			db()->insert('privileges',array('user_id'=>$id));			//\msg::set('success','Пользователь добавлен');			return $id;		}else{			\msg::set('error','Пользователь с таким логином существует');			return false;		}	}		public static function delUser($id){		db()->where(array('id'=>$id))->delete('users');		db()->where(array('user_id'=>$id))->delete('privileges');		\msg::set('success','Пользователь удален');			}		public static function changeInfo($id,$data){		if($data['password']=='')unset($data['password']);				try{			if($data['password'] && !preg_match('/^[a-zA-Z0-9]{5,20}$/iu',$data['password'])){				throw new Exception('Пароль должен 5-20 символов и состоять из a-Z 0-9');			}			if($data['password'] && $data['password']!=$data['password2']){				throw new Exception('Пароли не совпадают');			}			}catch(Exception $e){			\msg::set('error',$e->getMessage());			return false;		}				unset($data['password2']);				if(isset($data['password']))$data['password']=self::hash($data['password']);		unset($data['login']);		unset($data['id']);		db()->where(array('id'=>$id))->update('users',$data);		\msg::set('success','Данные пользователя изменены');		return true;	}		public static function changePriv($id,$data){		foreach($data as $key=>$value){			if($data[$key]){				$data[$key]=1;			}else{				$data[$key]=0;			}		}		db()->where(array('user_id'=>$id))->update('privileges',$data);		\msg::set('success','Права пользователя изменены');		return true;	}	public static function load($id,$flag=false){		$user= new static();		if($flag===false){			db()->where(array('id'=>$id));		}else{			db()->where(array('login'=>$id));		}		$data=db()->get('users');				if($data['id']){			$user->data=$data;			$user->id=$data['id'];			$user->privileges=db()->where(array('user_id'=>$user->id))->get('privileges');		}		return $user;	}	public function info($name){		return $this->data[$name];	}	public function priv($name){		if($this->privileges[$name]!=0 && $this->privileges[$name]!==NULL && $this->privileges[$name]!==false && isset($this->privileges[$name])){			return true;		}else{			return false;		}	}		public static function login($login,$password){		if($login=='' || $password==''){			\msg::set('error','Логин/пароль не должны быть пустыми');			return ;		}				$password=self::hash($password);		$data=db()->select('id')->where(array('login'=>$login,'password'=>$password))->get('users');		if($data['id']){			if(!session_id())session_start();			$_SESSION['user_id']=$data['id'];			$time=date("Y-m-d H:i:s");			setcookie("authtime",$time,time()+86400,"/");			db()->insert('sessions',array('user_id'=>$data['id'],'hash'=>self::hash(self::browserinfo(),$time),'timestamp'=>$time));		}else{			\msg::set('error','Логин/пароль не подошли');		}	}		public function logout($user_id=NULL){		if(isset($_REQUEST[session_name()])) session_start();				if($_SESSION['user_id'] && $_COOKIE['authtime'] && $user_id===NULL){			$time=$_COOKIE['authtime'];			db()->where(array('user_id'=>$_SESSION['user_id'],'hash'=>self::hash(self::browserinfo(),$time)))->delete('sessions');			setcookie("authtime",NULL,time()-3600,"/");			$_SESSION['user_id']==NULL;			session_destroy();			db()->query("delete from `sessions` where `timestamp`<NOW()-86400");			if($this!==NULL){				$this->auth=false;				$this->data=array();				$this->privileges=array();			}				return;		}		if($user_id){			db()->where(array('user_id'=>$user_id))->delete('sessions');		}	}	public static function curUser(){		if(!self::$_instance){			if($_SESSION['user_id'] && $_COOKIE['authtime']){				$time=$_COOKIE['authtime'];				$data=db()->select('user_id')->where(array('user_id'=>$_SESSION['user_id'],'hash'=>self::hash(self::browserinfo(),$time)))->get('sessions');				$id=$data['user_id'];				$user=self::load($id);				if($user->id){					$user->auth=true;				}else{					$user->auth=false;				}				if($user->info('banned'))$user->logout();			}else{				$user= new static();				$user->auth=false;			}			self::$_instance=$user;			return $user;		}else{			return self::$_instance;		}			}		public function isAuth(){		$id=(int)$this->id;		if($this->auth===NULL){			$data=db()->getBySql("select `user_id` from `sessions` where `user_id`='".$id."' and `timestamp`<NOW()-86400");			if($data['user_id']){				$this->auth=true;			}else{				$this->auth=false;			}			return $this->auth;		}else{			return $this->auth;		}	}		public function addLog($text){		$data['text']=$text;		$data['login']=user()->info('login');		db()->insert('journal',$data);		db()->query("DELETE  FROM `journal` WHERE `timestamp` < (NOW() - INTERVAL 60 DAY)");	}		public function dbCreate(){		db()->query(			'CREATE TABLE IF NOT EXISTS `users` (			`id` int(11) NOT NULL AUTO_INCREMENT,			`login` varchar(20) NOT NULL,			`password` varchar(48) NOT NULL,			PRIMARY KEY (`id`),			KEY `login` (`login`)			) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;'		);		db()->query(			'CREATE TABLE IF NOT EXISTS `sessions` (			`user_id` int(11) NOT NULL,			`hash` varchar(48) NOT NULL,			`timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,			KEY `user_id` (`user_id`,`hash`)			) ENGINE=InnoDB DEFAULT CHARSET=utf8;'		);		db()->query(			'CREATE TABLE IF NOT EXISTS `privileges` (			`user_id` int(11) NOT NULL,			PRIMARY KEY (`user_id`)			) ENGINE=InnoDB DEFAULT CHARSET=utf8;'		);				db()->query(			'CREATE TABLE IF NOT EXISTS `journal` (			`id` int(11) NOT NULL AUTO_INCREMENT,			`login` text NOT NULL,			`text` text NOT NULL,			`timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,			PRIMARY KEY (`id`)			) ENGINE=InnoDB  DEFAULT CHARSET=utf8 ;'		);	}	protected function browserinfo(){		return $_SERVER['HTTP_USER_AGENT'];	}}?>