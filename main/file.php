<?class file{	public $path;	public $cropPath;	public $size;	public $type;	public $ext;	public $name;	public $dir;	public $cropDir;	public $data;		public function __construct($path=NULL){		if($path){			$this->path=$path;			$this->fileinfo();		}	}	public function fileinfo(){		$this->path=preg_replace('/[\/]{2,}/ui','/',$this->path);		$path=$this->path;		$this->cropPath=str_replace(ROOT,'',$path);		$this->size=filesize($path); 		$path_parts=pathinfo ($path);		$this->ext=$path_parts['extension'];		$this->name=$path_parts['basename'];		$this->dir=$path_parts['dirname'];		$this->cropDir=str_replace(ROOT,'',$this->dir);		if($this->cropDir=='')$this->cropDir='/';	}		public static function get($path,$upload=false,$array=false){			if($upload===false){			$path=ROOT.'/'.$path;		}else{			$type=($array===false)?$_FILES[$path]['type']:$_FILES[$path]['type'][$array];			$name=($array===false)?$_FILES[$path]['name']:$_FILES[$path]['name'][$array];			$path_parts=pathinfo ($name);			$ext=$path_parts['extension'];			$path=($array===false)?$_FILES[$path]['tmp_name']:$_FILES[$path]['tmp_name'][$array];		}		$flag=($upload)?is_uploaded_file($path):true;			if(file_exists($path) and !is_dir($path) && $flag){			$obj=new static($path);			if($upload){				$obj->name=$name;				$obj->type=$type;				$obj->ext=$ext;			}				return $obj;		}else{			return false;		}	}		public function exists(){		return file_exists($this->path);	}	public function moveTo($dir){		$dir=ROOT.'/'.$dir;		if(!is_dir($dir)){			mkdir($dir,0777,true);		}		rename($this->path, $dir."/".$this->name);		chmod($dir."/".$this->name, 0777);		$this->path=$dir."/".$this->name;		$this->fileinfo();	}		public function copyTo($dir,$flag=false){		$rootDir=ROOT.'/'.$dir;		if(!is_dir($dir)){			mkdir($rootDir,0777,true);		}		copy($this->path, $rootDir."/".$this->name);		chmod($rootDir."/".$this->name, 0777);		if($flag!==false)return self::get($dir."/".$this->name); 	}					public function delete(){		unlink($this->path);	}		public static function getByCurl($url){		$ch=curl_init();		curl_setopt($ch,CURLOPT_URL,$url);		curl_setopt($ch,CURLOPT_TIMEOUT,25);		curl_setopt($ch,CURLOPT_FOLLOWLOCATION,true);		curl_setopt($ch,CURLOPT_USERAGENT,"Mozilla/5.0 (Windows; U; Windows NT 5.1; ru-RU; rv:1.7.12) Gecko/20050919 Firefox/1.0.7");		curl_setopt ($ch,CURLOPT_RETURNTRANSFER,1);		$game_content = curl_exec($ch);		$info = curl_getinfo($ch);		if($info["http_code"]==200){			$obj=new static();			$obj->size=$info["download_content_length"];			$obj->type=$info["content_type"];			$path_parts=pathinfo ($url);			$obj->ext=$path_parts['extension'];			$obj->name=$path_parts['basename'];			$obj->data=$game_content;			return $obj;		}else{			return false;		}	}	public function saveAs($path){		$path=ROOT.'/'.$path;		$path_parts=pathinfo ($path);		$dir=$path_parts['dirname'];		if(!is_dir($dir)){			mkdir($dir,0777,true);		}		$fp=fopen($path,"w");		flock ($fp,LOCK_EX);		fwrite($fp,$this->data);		flock ($fp,LOCK_UN);		fclose($fp);		chmod($path, 0777);		$this->path=$path;		$this->data=NULL;		$this->fileinfo();	}	 }?>