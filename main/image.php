<?class image extends file{	public $imageType;	public $height;	public $width;		public function fileinfo(){		parent::fileinfo();		$size=getimagesize($this->path);		$this->width=$size[0];		$this->height=$size[1];		$this->type=$size['mime'];				$types=array(			1=>'GIF',			2=>'JPG',			3=>'PNG',			4=>'SWF',			5=>'PSD',			6=>'BMP',			7=>'TIFF',			8=>'TIFF',			9=>'JPC',			10=>'JP2',			11=>'JPX',			12=>'JB2',			13=>'SWC',			14=>'IFF',			15=>'WBMP',			16=>'XBM',			17=>'ICO',			18=>'COUNT'  		);		$this->imageType=$types[$size[2]];	}	public function resize($file_output, $w_o, $h_o, $retrn=false ,$percent = false) {		$file_input=$this->path;		$file_output=ROOT.'/'.$file_output;		list($w_i, $h_i, $type) = getimagesize($file_input);		if (!$w_i || !$h_i) {			echo 'Невозможно получить длину и ширину изображения';			return;			}			$types = array('','gif','jpeg','png');			$ext = $types[$type];			if ($ext) {					$func = 'imagecreatefrom'.$ext;					$img = $func($file_input);			} else {					echo 'Некорректный формат файла';			return;			}		if ($percent) {			$w_o *= $w_i / 100;			$h_o *= $h_i / 100;		}		if (!$h_o) $h_o = $w_o/($w_i/$h_i);		if (!$w_o) $w_o = $h_o/($h_i/$w_i);		$img_o = imagecreatetruecolor($w_o, $h_o);		imagecopyresampled($img_o, $img, 0, 0, 0, 0, $w_o, $h_o, $w_i, $h_i);		if ($type == 2) {			imagejpeg($img_o,$file_output,90);		} else {			$func = 'image'.$ext;			$func($img_o,$file_output);		}		if($retrn===true) return new self($file_output);	}}?>