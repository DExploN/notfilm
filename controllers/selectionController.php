<?	namespace controllers;	class selectionController extends \controller{		public function index($page=1){			$this->finalRender('films/main');		}				public function detail($id,$url,$page=1){			$data['id']=$id;			$sel=\cache::read('/sel/'.$id,				function($id){					$sel=new \models\selection();					return $sel->select('id, name, name2, url, text')->get($id);				},array($id));							//$sel=$sel->select('id, name, url, text')->get($id);						if(!$sel['id']){				core()->code404();			}						if($sel['url']!=$url){				if($page>1)$pg='page/'.$page.'/';				core()->code301('/selection/'.$sel['id'].'-'.$sel['url'].'/'.$pg);			}									$films=new \models\films();						$sort=(int)$_COOKIE['sort'];			$sortType=(int)$_COOKIE['sortType'];						$filter=unserialize($_COOKIE['genrefilter']);			if(!is_array($filter))$filter=array();			if($filter[$id])$data['genre_id']=(int)$filter[$id];									$data['genbysel']=\cache::read('/genbysel/'.$id,				function($id){					return \models\genre::getBySelection($id);				},array($id));									if(($sort && $sortType) || $data['genre_id']){				$films= new \models\films();				if($data['genre_id'])$films->rightJoin('films_genre','films_genre.films_id','films.id')->where(array('genre_id'=>$data['genre_id']));				$nocachedata['list']=$films->getFilmsBySelection($id,$page,config('list_count'),$num);				$nocachedata['num']=$num;				$cachedata=$nocachedata;							}else{				$cachedata=\cache::read('/selfilms/'.$id.'/'.$page,					function($id,$page){						$films= new \models\films();						$data['list']=$films->getFilmsBySelection($id,$page,config('list_count'),$num);						$data['num']=$num;						return $data;					},array($id,$page));			}			$data['list']=$cachedata['list'];			if(!$data['list'] && $page>1)core()->code404();						$num=$cachedata['num'];												//$data['list']=$films->getFilmsBySelection($id,$page,config('list_count'),$num);																		$paginator = new \paginator($num,config('list_count'),$page);			$data['page']=$paginator->build();						$data['h1']=$sel['name'].' смотреть онлайн';			$data['title']=$sel['name'].' смотреть онлайн бесплатно';			$data['description']='В этом списке собраны лучшие '.$sel['name'].'. Смотрите их онлайн бесплатно в хорошем качестве. '.\str::crop($sel['text'],120);;			$data['keywords']=$sel['name'].", смотреть, онлайн, бесплатно, лучшие, список";						if($sel['name2']){				$data['title'].=', список лучших '.$sel['name2'];			}else{				$data['title'].=', список лучших фильмов';			}			if($page<2){								$data['footer_text']=$sel['text'];				$data['footer_title']='Смотрите бесплатно лучшие '.$sel['name'];				if($img=\image::get('/uploads/selection/'.$sel['id'].'/'.$sel['url'].'.jpg')){					$data['footer_img']=$img->cropPath;					$data['og_image']="http://notfilm.ru".$data['footer_img'];				}											if($sel['name2']){					$data['footer_title'].=' в списке '.$sel['name2'];				}									}else{				$data['title'].=". Страница ".$page;				$data['description'].=". Страница ".$page;				$data['keywords'].=", страница ".$page;				$data['noindex']='noindex';			}						$data['quality']=$films->getQuality();																		$this->addScript("/soclikes/social-likes.min.js");			$this->addStyle("/soclikes/social-likes_classic.css");						$data['soclikes']=1;						$data['startSort']=6;						if($_COOKIE['offers']<config('maxoffer_count'))$data['addbut']=$sel['name'];						$this->finalRender('films/list',$data);					}				public function all($page=1){			$selection= new \models\selection();			$data['list']=$selection->select('id,name,url')->orderby(array('name'=>'asc'))->getAllByPage($page,config('all_sel_count'),$num);						$paginator = new \paginator($num,config('all_sel_count'),$page);			$data['page']=$paginator->build();						$data['h1']='Подборки';			$data['title']='Список всех подборок';			$data['description']='Подборки фильмы и мультфильмов на notfilm.ru';			$data['keywords']='Список, всех, подборок';			if($page>1){				$data['title'].=". Страница ".$page;				}			$data['pagenum']=$page;					$this->finalRender('selection/grid',$data);		}				public function addForm(){						$data['captcha']= \form::getCaptcha(array('width'=>150));												$data['title']='Добавить подборку';			$data['h1']='Добавить подборку';			$data['noindex']='noindex';			$this->finalRender('selection/add',$data);		}				public function add(){			$data=$this->filt($_POST,'name','name2','crop_name','text','menu_rate');			$selection= new \models\selection();			if($selection->add($data)){				\cache::delete('/menu_selection_list/',true);				user()->addlog('Добавил подборку '.$data['name']);			}									core()->backpage();		}				public function changeForm(){						$data['update']=true;			$selection= new \models\selection();			if($_POST['id']){				$data=array_merge($data,$selection->get($_POST['id']));				if($img=\image::get('/uploads/selection/'.$data['id'].'/'.$data['url'].'.jpg')){					$data['img']=$img->cropPath;				}			}			$data['list']=$selection->addrule('select','id,name')->addRule('orderBy',array('name'=>'asc'))->getAll();			$data['captcha']= \form::getCaptcha(array('width'=>150));						$data['title']='Изменить подборку';			$data['h1']='Изменить подборку';			$data['noindex']='noindex';												$this->finalRender('selection/add',$data);		}				public function change(){			$_POST['id']=(int)$_POST['id'];			if($_POST['id']){				$data=$this->filt($_POST,'name','name2','text','crop_name','menu_rate');				$id=$_POST['id'];				$selection= new \models\selection();								if($selection->change($id,$data)){					\cache::delete('/menu_selection_list/',true);					\cache::delete('/sel/'.$_POST['id']);					user()->addlog('Изменил подборку '.$data['name']);				}											}			core()->backpage();		}				public function deleteForm(){						$selection= new \models\selection();			$data['list']=$selection->addrule('select','id,name')->addRule('orderBy',array('name'=>'asc'))->getAll();			$data['captcha']= \form::getCaptcha(array('width'=>150));						$data['title']='Удалить подборку';			$data['h1']='Удалить подборку';			$data['noindex']='noindex';			$this->finalRender('selection/delete',$data);		}				public function delete(){			$_POST['id']=(int)$_POST['id'];			if($_POST['id']){				$selection= new \models\selection();				$data=$selection->select('name')->get($_POST['id']);				if($selection->delete($_POST['id'])){									user()->addlog('Удалил подборку '.$data['name']);					\cache::delete('/menu_selection_list/',true);					\cache::delete('/sel/'.$_POST['id']);					\cache::delete('/selfilms/'.$_POST['id'].'/',true);				}											}			core()->backpage();		}						public function botsel(){					$max=\cache::read('/maxsel/',function(){								$data=db()->getBySql("select max(`id`) as `max` from `selection`");				return $data['max'];			});						$id=rand(1,$max);						$arr=\cache::read('/botsel/'.$id,function($id){				$sel=new \models\selection();				return $sel->select('id,name,url')->perelink($id,5);			},array($id));						$data['list']=$arr;			echo $this->render("selection/bot",$data);					}				public function accessRules(){			return array(				'addForm'=>(user()->info('id')==1),				'add'=>(user()->info('id')==1),				'changeForm'=>(user()->info('id')==1),				'change'=>(user()->info('id')==1),				'deleteForm'=>(user()->info('id')==1),				'delete'=>(user()->info('id')==1),			);		}		public function captchaRules(){		return array('add','change','delete');		}	}?>